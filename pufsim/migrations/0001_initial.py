# Generated by Django 2.2.1 on 2019-06-12 15:38

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='PDF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('distribution', models.CharField(choices=[('dirac', 'dirac delta (singleton)'), ('normal', 'normal (gaussian)'), ('uniform', 'uniform')], max_length=30)),
                ('mean', models.FloatField(blank=True, default=10.0, null=True)),
                ('sigma', models.FloatField(blank=True, default=0.1, null=True)),
                ('lbound', models.FloatField(blank=True, default=9.9, null=True)),
                ('rbound', models.FloatField(blank=True, default=10.1, null=True)),
            ],
            options={
                'verbose_name': 'Probability Distribution Function',
            },
        ),
        migrations.CreateModel(
            name='PUFGenerator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('architecture', models.CharField(choices=[('loop', 'loop'), ('arbiter', 'arbiter')], max_length=30)),
                ('stages', models.IntegerField(default=10)),
                ('sensitivity', models.FloatField(default=0.0, help_text='If the difference in delay of the two signal paths in the PUF is less than this value, then the result will be random. Otherwise, the result is deterministic.')),
                ('production_pdf', models.ForeignKey(help_text='Variance during initial production of the PUF.', on_delete=django.db.models.deletion.CASCADE, to='pufsim.PDF', verbose_name='Production PDF')),
                ('sample_pdf', models.ForeignKey(help_text='Variance each time the produced PUF is sampled.', on_delete=django.db.models.deletion.CASCADE, related_name='sample_pdf_revacc', to='pufsim.PDF', verbose_name='Sample PDF')),
            ],
            options={
                'verbose_name': 'PUF Generator',
            },
        ),
        migrations.CreateModel(
            name='CompositePUFGenerator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('architecture', models.CharField(choices=[('xor', 'xor')], max_length=30)),
                ('levels', models.IntegerField(default=10)),
                ('child_architecture', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pufsim.PUFGenerator')),
            ],
            options={
                'verbose_name': 'Composite PUF Generator',
            },
        ),
    ]
